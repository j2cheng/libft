ft_memset:     
ft_bzero:      [MISSING]
ft_memcpy:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] 
[crash]: your memcpy does not behave well with NULL as both params with size
Test code:
	ft_memcpy(((void *)0), ((void *)0), 3);


ft_memccpy:    [MISSING]
ft_memmove:    [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [OK] [OK] [TIMEOUT] [OK] [OK] [OK] [OK] [CRASH] [TIMEOUT] Test code:
	char *src = "this is a good nyancat !\r\n";
	char dst1[0xF0];
	char dst2[0xF0];
	int size = strlen(src);

	__builtin___memmove_chk (dst1, src, size, __builtin_object_size (dst1, 0));
	ft_memmove(dst2, src, size);
	if (!memcmp(dst1, dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Test code:
	char *src = "thanks to @apellicc for this test !\r\n";
	char dst1[0xF0];
	int size = strlen(src);
	char *r1 = __builtin___memmove_chk (dst1, src, size, __builtin_object_size (dst1, 0));
	char *r2 = ft_memmove(dst1, src, size);

	if (r1 != r2)
		exit(TEST_FAILED);
	r1 = __builtin___memmove_chk ("", "" - 1, 0, __builtin_object_size ("", 0));
	r2 = ft_memmove("", "" - 1, 0);
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);

Test code:
	char *src = "thi\xffs i\xfas \0a g\xde\xadood \0nyan\0cat\0 !\r\n";
	int size = 33;
	char dst1[0xF0];
	char dst2[0xF0];

	__builtin___memmove_chk (dst1, src, size, __builtin_object_size (dst1, 0));
	ft_memmove(dst2, src, size);
	if (!memcmp(dst1, dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Test code:
	unsigned long src = 0xdeadbeef;
	int size = sizeof(src);

	unsigned long dst1;
	unsigned long dst2;
	__builtin___memmove_chk (&dst1, &src, size, __builtin_object_size (&dst1, 0));
	ft_memmove(&dst2, &src, size);
	if (!memcmp(&dst1, &dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Test code:
	char dst1[0xF0];
	char dst2[0xF0];
	char *data = "thiß ß\xde\xad\xbe\xeftriñg will be øvérlapéd !\r\n";
	int size = 0xF0 - 0xF;

	__builtin___memset_chk (dst1, 'A', sizeof(dst1), __builtin_object_size (dst1, 0));
	__builtin___memset_chk (dst2, 'A', sizeof(dst2), __builtin_object_size (dst2, 0));
	__builtin___memcpy_chk (dst1, data, strlen(data), __builtin_object_size (dst1, 0));
	__builtin___memcpy_chk (dst2, data, strlen(data), __builtin_object_size (dst2, 0));
	__builtin___memmove_chk (dst1 + 3, dst1, size, __builtin_object_size (dst1 + 3, 0));
	ft_memmove(dst2 + 3, dst2, size);
	if (!memcmp(dst1, dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Test code:
	int size = 128 * 1024 * 1024;
	char *dst = (char *)malloc(sizeof(char) * size);
	char *data = (char *)malloc(sizeof(char) * size);

	__builtin___memset_chk (data, 'A', size, __builtin_object_size (data, 0));
	if (!dst)
		exit(TEST_INVISIBLE);
	ft_memmove(dst, data, size);
	exit(TEST_SUCCESS);


[crash]: your memmove does not well with NULL as both parameters and size
Test code:
	ft_memmove(((void *)0), ((void *)0), 5);

Test code:
	char *src = "the cake is a lie !\0I'm hidden lol\r\n";
	char buff[0xF0];

	char *ret = ft_memmove(buff, src, 100);
	if (ret == ((void *)0))
	{
		exit(TEST_FAILED);
	}
	exit(TEST_SUCCESS);


ft_memchr:     [MISSING]
ft_memcmp:     [MISSING]
ft_strlen:     [MISSING]
ft_isalpha:    [MISSING]
ft_isdigit:    [MISSING]
ft_isalnum:    [MISSING]
ft_isascii:    [MISSING]
ft_isprint:    [MISSING]
ft_toupper:    [MISSING]
ft_tolower:    [MISSING]
ft_strchr:     [MISSING]
ft_strrchr:    [MISSING]
ft_strncmp:    [MISSING]
ft_strlcpy:    [MISSING]
ft_strlcat:    [MISSING]
ft_strnstr:    [MISSING]
ft_atoi:       [MISSING]
ft_calloc:     [MISSING]
ft_strdup:     [MISSING]
ft_substr:     [MISSING]
ft_strjoin:    [MISSING]
ft_strtrim:    [MISSING]
ft_split:      [MISSING]
ft_itoa:       [MISSING]
ft_strmapi:    [MISSING]
ft_putchar_fd: [MISSING]
ft_putstr_fd:  [MISSING]
ft_putendl_fd: [MISSING]
ft_putnbr_fd:  [MISSING]
ft_lstnew:     [MISSING]
ft_lstadd_front: [MISSING]
ft_lstsize:    [MISSING]
ft_lstlast:    [MISSING]
ft_lstadd_back:[MISSING]
ft_lstdelone:  [MISSING]
ft_lstclear:   [MISSING]
ft_lstiter:    [MISSING]
ft_lstmap:     [MISSING]
